
Suppose that we had two vectors:
X = [0, 0,  1, 0, 0, 5]
Y = [3, 0, -1, 0, 0, 4]

These vectors would be represented by these two sparse vectors:
V1 = [(2,  1), (5,  5)]
V2 = [(0,  3), (2, -1), (5,  4)]

Each element of the sparse vector contains two components: The first
component  describes the position of a value in the original vector,
whereas the second component is the value itself.

In the beginning of the algorithm, we have two indices that point to
the beginning of the vectors.

V3 = []

         |
         v
V1 = [(2,  1), (5,  5)]
V2 = [(0,  3), (2, -1), (5,  4)]
         ^
         |

These elements have different positions, so we take the element with
the smaller position (0, 3), and add it to our new sparse vector V3.
Then, we advance the index that pointed to (0,  3).

V3 = [(0,  3)]

         |
         v
V1 = [(2,  1), (5,  5)]
V2 = [(0,  3), (2, -1), (5,  4)]
                  ^
                  |

These elements have the same position (2), so we just add the values
together.  Since they sum to 0, position 2 in the new vector will be
0.  This means it won't be included in the new sparse vector, as the
sparse vector only stores non-zero values to save space.  Now, since
the elements have the same position, we advance both indices.

V3 = [(0,  3)]

                  |
                  v
V1 = [(2,  1), (5,  5)]
V2 = [(0,  3), (2, -1), (5,  4)]
                           ^
                           |

Again,  these elements have the same position (5), and they sum to a
*non-zero* value (9). So the new element is (5, 9), and we append it
to the new sparse vector.

V3 = [(0,  3), (5,  9)]

                      |
                      v
V1 = [(2,  1), (5,  5)]
V2 = [(0,  3), (2, -1), (5,  4)]
                               ^
                               |

Since we have exhausted both sparse vectors, we are done.

So this is our algorithm in pseudocode:

--------------------------------------------------------------------

// We'll call the two components of a sparse vector element pos (for
// position) and val (for value).
// We also assume that lists have a method called append, which adds
// something to the end of the list in constant time (O(1)).

V3 = []
i = 0 // used to scan through V1
j = 0 // used to scan through V2

// while V1 and V2 are not both exhausted
while i < V1.length or j < V2.length do
    // V1 is exhausted, but not V2
    if i = V1.length then
        V3.append(V2[j])
        j = j + 1

    // V2 is exhausted, but not V1
    elif j = V2.length then
        V3.append(V1[i])
        i = i + 1

    // position of V1[i] is equal to the position of V2[j]
    elif V1[i].pos = V2[j].pos then
        sum = V1[i].val + V2[j].val
        if sum != 0 then
            V3.append((V1[i].pos, sum))
        end if
        i = i + 1
        j = j + 1

    // position of V1[i] is smaller than position of V2[j]
    elif V1[i].pos < V2[j].pos then
        V3.append(V1[i])
        i = i + 1

    // position of V2[j] is smaller than position of V1[i]
    else
        V3.append(V2[j])
        j = j + 1
    end if
end while

--------------------------------------------------------------------

Time Complexity Analysis

Let M and N be the lengths of V1 and V2 respectively.
Adding  a  sparse vector element to V3 takes O(1) time (as append is
O(1)). In the worst case (all positions in V1 and V2 are different),
M + N sparse vector elements are added to V3, so the time complexity
of the algorithm is O(M + N).

